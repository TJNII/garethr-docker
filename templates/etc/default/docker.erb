# Docker Upstart and SysVinit configuration file
#
# THIS FILE IS MANAGED BY PUPPET. Changes will be overwritten.

# # Customize location of Docker binary (especially for development testing).
DOCKER="/usr/bin/<%= @docker_command %>"

# # If you need Docker to use an HTTP proxy, it can also be specified here.
<% if @proxy -%>
export http_proxy='<%= @proxy %>'
export https_proxy='<%= @proxy %>'
<% end -%>
<% if @no_proxy -%>
export no_proxy='<%= Array(@no_proxy).join(',') %>'
<% end -%>

# # This is also a handy place to tweak where Docker's temporary files go.
export TMPDIR="<%= @tmp_dir %>"

# # Use DOCKER_OPTS to modify the daemon startup options.
<%
# SystemD config in Debian Jessie is not whitespace tolerant.
# Build an array of options and join them rather than pad whitespace in
# if blocks
#
# Define a array of hashes with the variable name and flag for the daemon
# If the option is a list then interable is set to the array variable name.
opt_map = [ 
           # All the flag strings contain '="' to make things much easier with 
           # the devicemapper args.
           {:name => 'root_dir',        :iterable => nil, :flag => '-g="'},
           {:name => 'tcp_bind',        :iterable => nil, :flag => '-H="'},
           {:name => 'socket_bind',     :iterable => nil, :flag => '-H="'},
           {:name => 'log_level',       :iterable => nil, :flag => '-l="'},
           {:name => 'selinux_enabled', :iterable => nil, :flag => '--selinux-enabled="'},
           {:name => 'socket_group',    :iterable => nil, :flag => '-G="'},
           {:name => 'dns',             :iterable => 'dns_array',        :flag => '--dns="'},
           {:name => 'dns_search',      :iterable => 'dns_search_array', :flag => '--dns-search="'},
           {:name => 'execdriver',      :iterable => nil, :flag => '-e="'},
           {:name => 'storage_driver',  :iterable => nil, :flag => '--storage-driver="'},
          ]

# Arguments that only apply for devicemapper
if @storage_driver == 'devicemapper'
  opt_map.push({:name => 'dm_basesize',         :iterable => nil, :flag => '--storage-opt="dm.basesize'})
  opt_map.push({:name => 'dm_fs',               :iterable => nil, :flag => '--storage-opt="dm.fs'})
  opt_map.push({:name => 'dm_mkfsarg',          :iterable => nil, :flag => '--storage-opt="dm.mkfsarg'})
  opt_map.push({:name => 'dm_mountopt',         :iterable => nil, :flag => '--storage-opt="dm.mountopt'})
  opt_map.push({:name => 'dm_blocksize',        :iterable => nil, :flag => '--storage-opt="dm.blocksize'})
  opt_map.push({:name => 'dm_loopdatasize',     :iterable => nil, :flag => '--storage-opt="dm.loopdatasize'})
  opt_map.push({:name => 'dm_loopmetadatasize', :iterable => nil, :flag => '--storage-opt="dm.loopmetadatasize'})
  opt_map.push({:name => 'dm_datadev',          :iterable => nil, :flag => '--storage-opt="dm.datadev'})
  opt_map.push({:name => 'dm_metadatadev',      :iterable => nil, :flag => '--storage-opt="dm.metadatadev'})
end

# Build the array using a standard method
options = []
opt_map.each do |opt_hash|
  var = instance_variable_get(:"@#{opt_hash[:name]}")
  if var
    # Some options can be appended multiple times (the iterable option)
    # Build an iterable for all args so all options are handles the same way.
    if opt_hash[:iterable] != nil:
      var_iterable = instance_variable_get(:"@#{opt_hash[:iterable]}")
    else
      var_iterable = [ var ]
    end

    var_iterable.each do |arg|
      options.push("#{opt_hash[:flag]}#{arg}\"")
    end
  end
end

# And the special case: extra args
if @extra_parameters 
   options.concat(@extra_parameters_array)
end
-%>
DOCKER_OPTS="<%= options.join(" ") -%>"

<% if @shell_values %><% @shell_values_array.each do |param| %>
<%= param %><% end %><% end %>
